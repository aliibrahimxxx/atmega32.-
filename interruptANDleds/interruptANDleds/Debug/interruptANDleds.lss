
interruptANDleds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e1  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000594  00000000  00000000  00000925  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002db  00000000  00000000  00000eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_2>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 84 00 	call	0x108	; 0x108 <main>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
 */ 
#define F_CPU 1000000ul
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
ISR(INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTA |=(1<<0) ; 
  7c:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f e3       	ldi	r18, 0x3F	; 63
  80:	8d e0       	ldi	r24, 0x0D	; 13
  82:	93 e0       	ldi	r25, 0x03	; 3
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <__vector_1+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <__vector_1+0x22>
  8e:	00 00       	nop
	_delay_ms(1000); 
}
  90:	9f 91       	pop	r25
  92:	8f 91       	pop	r24
  94:	2f 91       	pop	r18
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <__vector_2>:
ISR(INT1_vect){
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
	PORTA |=(1<<1); 
  b0:	d9 9a       	sbi	0x1b, 1	; 27
  b2:	2f e3       	ldi	r18, 0x3F	; 63
  b4:	8d e0       	ldi	r24, 0x0D	; 13
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <__vector_2+0x18>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_2+0x22>
  c2:	00 00       	nop
	_delay_ms(1000); 
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_3>:
ISR (INT2_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	PORTA |=(1<<2);
  e4:	da 9a       	sbi	0x1b, 2	; 27
  e6:	2f e3       	ldi	r18, 0x3F	; 63
  e8:	8d e0       	ldi	r24, 0x0D	; 13
  ea:	93 e0       	ldi	r25, 0x03	; 3
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <__vector_3+0x18>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <__vector_3+0x22>
  f6:	00 00       	nop
	_delay_ms(1000); 
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:
int main(void)
{	
	 cli();// SREG &= ~(1<<7); 
 108:	f8 94       	cli
	 DDRA |=(1<<0)|(1<<1)|(1<<2);
 10a:	8a b3       	in	r24, 0x1a	; 26
 10c:	87 60       	ori	r24, 0x07	; 7
 10e:	8a bb       	out	0x1a, r24	; 26
	// DDRD &=~((1<<2)|(1<<3))  ; 
	 DDRB &=~(1<<2);
 110:	ba 98       	cbi	0x17, 2	; 23
	 MCUCR |=(1<<0)|(1<<2)|(1<<3); 
 112:	85 b7       	in	r24, 0x35	; 53
 114:	8d 60       	ori	r24, 0x0D	; 13
 116:	85 bf       	out	0x35, r24	; 53
	 MCUCR &=~(1<<1); 
 118:	85 b7       	in	r24, 0x35	; 53
 11a:	8d 7f       	andi	r24, 0xFD	; 253
 11c:	85 bf       	out	0x35, r24	; 53
	 MCUCSR &=~(1<<7);
 11e:	84 b7       	in	r24, 0x34	; 52
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	84 bf       	out	0x34, r24	; 52
	 DDRA |= (1<<0) ;
 124:	d0 9a       	sbi	0x1a, 0	; 26
	 GICR |=(1<<6)|(1<<5)|(1<<7) ;
 126:	8b b7       	in	r24, 0x3b	; 59
 128:	80 6e       	ori	r24, 0xE0	; 224
 12a:	8b bf       	out	0x3b, r24	; 59
	 sei();
 12c:	78 94       	sei
    while (1) 
    {
		PORTA &=~((1<<0)|(1<<1)|(1<<2));
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	8b bb       	out	0x1b, r24	; 27
 134:	2f e7       	ldi	r18, 0x7F	; 127
 136:	8a e1       	ldi	r24, 0x1A	; 26
 138:	96 e0       	ldi	r25, 0x06	; 6
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x32>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x3c>
 144:	00 00       	nop
 146:	f3 cf       	rjmp	.-26     	; 0x12e <main+0x26>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
